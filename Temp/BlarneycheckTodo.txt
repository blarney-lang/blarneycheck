Forall(Bits a => a -> Prop)
Forall(KnownNat n => Bit n -> Prop)
ForallList(Int -> [Bit 8] -> Prop)


prop = ForAllList \xs -> isSOrted(sort xs)

widthOf :: KnownNat n => n -> int
sizeOf :: Bits a => a -> int

Instantiate prop just once

class Serial a
 series :: Int -> [a]

-------

data ShowList where
	ShowList :: Show a => [a]

data Gen a =

-------

Make sequential check work with Bits (Serial)
--Create sorter (buggy) and check lists
Allow choice of seq or par check

-------

Create sorter (buggy) and check lists
Streams?

-------

Get max size of input
Zero one principle of sorters
https://github.com/POETSII/actora/blob/master/rtl/Stack.hs
Look into koens thesis tutorial for examples
	- Rotate left/right
	- Matrix/Vector operations

---------

Implement for FPGA testing
Generator

